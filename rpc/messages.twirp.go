// Code generated by protoc-gen-twirp v5.7.0, DO NOT EDIT.
// source: messages.proto

package rpc

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// ==================
// Messages Interface
// ==================

type Messages interface {
	Add(context.Context, *MessagesAddRequest) (*MessagesAddResponse, error)

	Get(context.Context, *MessagesGetRequest) (*MessagesGetResponse, error)
}

// ========================
// Messages Protobuf Client
// ========================

type messagesProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewMessagesProtobufClient creates a Protobuf client that implements the Messages interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewMessagesProtobufClient(addr string, client HTTPClient) Messages {
	prefix := urlBase(addr) + MessagesPathPrefix
	urls := [2]string{
		prefix + "Add",
		prefix + "Get",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &messagesProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &messagesProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *messagesProtobufClient) Add(ctx context.Context, in *MessagesAddRequest) (*MessagesAddResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "")
	ctx = ctxsetters.WithServiceName(ctx, "Messages")
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	out := new(MessagesAddResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesProtobufClient) Get(ctx context.Context, in *MessagesGetRequest) (*MessagesGetResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "")
	ctx = ctxsetters.WithServiceName(ctx, "Messages")
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	out := new(MessagesGetResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ====================
// Messages JSON Client
// ====================

type messagesJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewMessagesJSONClient creates a JSON client that implements the Messages interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewMessagesJSONClient(addr string, client HTTPClient) Messages {
	prefix := urlBase(addr) + MessagesPathPrefix
	urls := [2]string{
		prefix + "Add",
		prefix + "Get",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &messagesJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &messagesJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *messagesJSONClient) Add(ctx context.Context, in *MessagesAddRequest) (*MessagesAddResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "")
	ctx = ctxsetters.WithServiceName(ctx, "Messages")
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	out := new(MessagesAddResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesJSONClient) Get(ctx context.Context, in *MessagesGetRequest) (*MessagesGetResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "")
	ctx = ctxsetters.WithServiceName(ctx, "Messages")
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	out := new(MessagesGetResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =======================
// Messages Server Handler
// =======================

type messagesServer struct {
	Messages
	hooks *twirp.ServerHooks
}

func NewMessagesServer(svc Messages, hooks *twirp.ServerHooks) TwirpServer {
	return &messagesServer{
		Messages: svc,
		hooks:    hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *messagesServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// MessagesPathPrefix is used for all URL paths on a twirp Messages server.
// Requests are always: POST MessagesPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const MessagesPathPrefix = "/Messages/"

func (s *messagesServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "")
	ctx = ctxsetters.WithServiceName(ctx, "Messages")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/Messages/Add":
		s.serveAdd(ctx, resp, req)
		return
	case "/Messages/Get":
		s.serveGet(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *messagesServer) serveAdd(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAddJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAddProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messagesServer) serveAddJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessagesAddRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *MessagesAddResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Messages.Add(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessagesAddResponse and nil error while calling Add. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messagesServer) serveAddProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessagesAddRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *MessagesAddResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Messages.Add(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessagesAddResponse and nil error while calling Add. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messagesServer) serveGet(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *messagesServer) serveGetJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MessagesGetRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *MessagesGetResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Messages.Get(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessagesGetResponse and nil error while calling Get. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messagesServer) serveGetProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MessagesGetRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *MessagesGetResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Messages.Get(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MessagesGetResponse and nil error while calling Get. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *messagesServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *messagesServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *messagesServer) PathPrefix() string {
	return MessagesPathPrefix
}

var twirpFileDescriptor1 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x6a, 0xfa, 0x40,
	0x10, 0xc6, 0x4d, 0xa2, 0xfe, 0xcd, 0xfc, 0x41, 0xca, 0x5a, 0x4a, 0x10, 0xac, 0x12, 0x5a, 0xb0,
	0x94, 0x24, 0x62, 0xa1, 0x97, 0x9e, 0x14, 0x8a, 0xa7, 0xf6, 0x90, 0x63, 0x2f, 0x65, 0xcd, 0x2e,
	0x26, 0xa8, 0xd9, 0x34, 0x3b, 0x56, 0xfb, 0x16, 0x7d, 0x43, 0xc1, 0x27, 0x29, 0xae, 0xab, 0x46,
	0xec, 0xa1, 0xb7, 0xc9, 0x7c, 0xfb, 0xcd, 0xf7, 0xdb, 0xec, 0x40, 0x7d, 0xce, 0xa5, 0xa4, 0x13,
	0x2e, 0xfd, 0x2c, 0x17, 0x28, 0x9a, 0x8f, 0x93, 0x04, 0xe3, 0xc5, 0xd8, 0x8f, 0xc4, 0x3c, 0x98,
	0x2f, 0x13, 0x9c, 0x8a, 0x65, 0x30, 0x11, 0x9e, 0x12, 0xbd, 0x4f, 0x3a, 0x4b, 0x18, 0x45, 0x91,
	0xcb, 0xe0, 0x50, 0xee, 0x7c, 0xee, 0x0a, 0xfe, 0xbd, 0xec, 0x26, 0x91, 0x3a, 0x98, 0x09, 0x73,
	0x8c, 0x8e, 0xd1, 0xb5, 0x42, 0x33, 0x61, 0x84, 0x40, 0x39, 0x8a, 0x29, 0x3a, 0xa6, 0xea, 0xa8,
	0x9a, 0x5c, 0x41, 0x95, 0x2e, 0x30, 0x16, 0xb9, 0x63, 0xa9, 0xae, 0xfe, 0xda, 0x9e, 0x45, 0xbe,
	0x42, 0xa7, 0xdc, 0x31, 0xba, 0x76, 0xa8, 0x6a, 0xd2, 0x02, 0x88, 0x72, 0x4e, 0x91, 0xb3, 0x77,
	0x8a, 0x4e, 0x45, 0x29, 0xb6, 0xee, 0x0c, 0xd0, 0x15, 0x40, 0x74, 0xb2, 0x1c, 0x30, 0x16, 0xf2,
	0x8f, 0x05, 0x97, 0x48, 0x9a, 0x3a, 0x54, 0x61, 0x0c, 0xab, 0x9b, 0x75, 0xdb, 0xbc, 0x28, 0xe9,
	0xf0, 0xeb, 0x43, 0xb8, 0x79, 0xa2, 0xee, 0x21, 0x5a, 0x1a, 0x62, 0x8b, 0x66, 0x0f, 0xed, 0xcd,
	0xba, 0x5d, 0xc9, 0x4a, 0xab, 0xef, 0xd7, 0x1d, 0x8f, 0x7b, 0x0b, 0x8d, 0x93, 0x40, 0x99, 0x89,
	0x54, 0x9e, 0x5d, 0xdb, 0xed, 0x1d, 0xb9, 0x46, 0x1c, 0xff, 0xc0, 0xe5, 0x3e, 0x1d, 0x07, 0x2b,
	0x87, 0x1e, 0x7c, 0x03, 0xb5, 0xfd, 0x23, 0x39, 0x46, 0xc7, 0xea, 0xfe, 0xef, 0xd7, 0x7c, 0x7d,
	0x2e, 0x3c, 0x28, 0xfd, 0x14, 0x6a, 0x7b, 0x33, 0xe9, 0x81, 0x35, 0x60, 0x8c, 0x34, 0xfc, 0xf3,
	0x1f, 0xd3, 0xbc, 0xf4, 0x7f, 0x83, 0xef, 0x81, 0x35, 0xe2, 0x58, 0x70, 0x1c, 0x91, 0x0b, 0x8e,
	0x02, 0xd5, 0xf0, 0xfe, 0xed, 0xae, 0xb0, 0x2a, 0x8c, 0x22, 0x9d, 0x25, 0xe9, 0xf4, 0x39, 0xf8,
	0xe2, 0xe8, 0xd1, 0x54, 0x60, 0xcc, 0x73, 0x6f, 0x7b, 0xab, 0x20, 0xcf, 0xa2, 0x71, 0x55, 0x2d,
	0xc9, 0xc3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0xbd, 0xaa, 0x4b, 0x6e, 0x02, 0x00, 0x00,
}
