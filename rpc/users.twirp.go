// Code generated by protoc-gen-twirp v5.7.0, DO NOT EDIT.
// source: users.proto

package rpc

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// ===============
// Users Interface
// ===============

type Users interface {
	Add(context.Context, *UsersAddRequest) (*UsersAddResponse, error)

	Get(context.Context, *UsersGetRequest) (*UsersGetResponse, error)
}

// =====================
// Users Protobuf Client
// =====================

type usersProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewUsersProtobufClient creates a Protobuf client that implements the Users interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewUsersProtobufClient(addr string, client HTTPClient) Users {
	prefix := urlBase(addr) + UsersPathPrefix
	urls := [2]string{
		prefix + "Add",
		prefix + "Get",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &usersProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &usersProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *usersProtobufClient) Add(ctx context.Context, in *UsersAddRequest) (*UsersAddResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "")
	ctx = ctxsetters.WithServiceName(ctx, "Users")
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	out := new(UsersAddResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersProtobufClient) Get(ctx context.Context, in *UsersGetRequest) (*UsersGetResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "")
	ctx = ctxsetters.WithServiceName(ctx, "Users")
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	out := new(UsersGetResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =================
// Users JSON Client
// =================

type usersJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewUsersJSONClient creates a JSON client that implements the Users interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewUsersJSONClient(addr string, client HTTPClient) Users {
	prefix := urlBase(addr) + UsersPathPrefix
	urls := [2]string{
		prefix + "Add",
		prefix + "Get",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &usersJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &usersJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *usersJSONClient) Add(ctx context.Context, in *UsersAddRequest) (*UsersAddResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "")
	ctx = ctxsetters.WithServiceName(ctx, "Users")
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	out := new(UsersAddResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersJSONClient) Get(ctx context.Context, in *UsersGetRequest) (*UsersGetResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "")
	ctx = ctxsetters.WithServiceName(ctx, "Users")
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	out := new(UsersGetResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ====================
// Users Server Handler
// ====================

type usersServer struct {
	Users
	hooks *twirp.ServerHooks
}

func NewUsersServer(svc Users, hooks *twirp.ServerHooks) TwirpServer {
	return &usersServer{
		Users: svc,
		hooks: hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *usersServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// UsersPathPrefix is used for all URL paths on a twirp Users server.
// Requests are always: POST UsersPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const UsersPathPrefix = "/Users/"

func (s *usersServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "")
	ctx = ctxsetters.WithServiceName(ctx, "Users")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/Users/Add":
		s.serveAdd(ctx, resp, req)
		return
	case "/Users/Get":
		s.serveGet(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *usersServer) serveAdd(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAddJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAddProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *usersServer) serveAddJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UsersAddRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *UsersAddResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Users.Add(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UsersAddResponse and nil error while calling Add. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *usersServer) serveAddProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UsersAddRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *UsersAddResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Users.Add(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UsersAddResponse and nil error while calling Add. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *usersServer) serveGet(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *usersServer) serveGetJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UsersGetRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *UsersGetResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Users.Get(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UsersGetResponse and nil error while calling Get. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *usersServer) serveGetProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UsersGetRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *UsersGetResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Users.Get(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UsersGetResponse and nil error while calling Get. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *usersServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor2, 0
}

func (s *usersServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *usersServer) PathPrefix() string {
	return UsersPathPrefix
}

var twirpFileDescriptor2 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x49, 0x62, 0xc4, 0x4c, 0x41, 0xdb, 0x9c, 0x42, 0x45, 0x2c, 0x01, 0xa1, 0x56, 0x92,
	0x85, 0x0a, 0xe2, 0xb5, 0x05, 0xe9, 0xd9, 0x80, 0x20, 0x5e, 0xca, 0x36, 0x3b, 0xb4, 0x4b, 0xdb,
	0x6c, 0xdd, 0x9d, 0x5a, 0xbd, 0xf9, 0x4f, 0x05, 0x7f, 0x89, 0x64, 0x9b, 0xb6, 0xa1, 0xde, 0x92,
	0x99, 0xf7, 0xbe, 0xf7, 0xd8, 0x81, 0xc6, 0xda, 0xa0, 0x36, 0xe9, 0x4a, 0x2b, 0x52, 0xed, 0x87,
	0xa9, 0xa4, 0xd9, 0x7a, 0x92, 0xe6, 0x6a, 0xc9, 0x96, 0x1b, 0x49, 0x73, 0xb5, 0x61, 0x53, 0x95,
	0xd8, 0x65, 0xf2, 0xc1, 0x17, 0x52, 0x70, 0x52, 0xda, 0xb0, 0xfd, 0xe7, 0xd6, 0x17, 0x3f, 0xc3,
	0xc9, 0x8b, 0x41, 0x1d, 0x9e, 0x83, 0x2b, 0x45, 0xe4, 0x74, 0x9c, 0xae, 0x97, 0xb9, 0x52, 0x84,
	0x6d, 0x38, 0x2b, 0xf1, 0x05, 0x5f, 0x62, 0xe4, 0x76, 0x9c, 0x6e, 0x90, 0xed, 0xff, 0xc3, 0x2b,
	0x80, 0x5c, 0x23, 0x27, 0x14, 0x63, 0x4e, 0x91, 0x67, 0xb7, 0x41, 0x35, 0x19, 0x50, 0xfc, 0x08,
	0x17, 0x25, 0xd2, 0x0c, 0x84, 0xc8, 0xf0, 0x7d, 0x8d, 0x86, 0xc2, 0x9b, 0x1a, 0xad, 0xcc, 0x08,
	0x86, 0xc1, 0xef, 0xcf, 0xb5, 0xff, 0xea, 0x7c, 0x7e, 0xbb, 0x07, 0x70, 0x1c, 0x43, 0xf3, 0xe0,
	0x34, 0x2b, 0x55, 0x18, 0x3c, 0x2e, 0x16, 0xb7, 0x2a, 0xfa, 0x08, 0xa9, 0xa2, 0xc7, 0xac, 0xb2,
	0xd9, 0x51, 0x65, 0xbb, 0x04, 0xdf, 0x3e, 0x4f, 0xe4, 0x74, 0xbc, 0x6e, 0xa3, 0xef, 0xa7, 0xa5,
	0x22, 0xdb, 0xce, 0xfa, 0x63, 0xf0, 0xad, 0x21, 0xec, 0x81, 0x37, 0x10, 0x22, 0x6c, 0xa6, 0x47,
	0x85, 0xdb, 0xad, 0xf4, 0x5f, 0x91, 0x1e, 0x78, 0x23, 0xa4, 0x9d, 0xf6, 0x10, 0xbf, 0xd3, 0xd6,
	0xd2, 0x87, 0x77, 0x6f, 0xb7, 0xb5, 0x7b, 0x08, 0x4e, 0x7c, 0x21, 0x8b, 0xf9, 0x13, 0xfb, 0x42,
	0x4a, 0x78, 0xa1, 0x68, 0x86, 0x3a, 0xc9, 0x67, 0x9c, 0x98, 0x5e, 0xe5, 0x93, 0x53, 0x7b, 0x89,
	0xfb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x71, 0xc8, 0x7e, 0xd0, 0x01, 0x00, 0x00,
}
